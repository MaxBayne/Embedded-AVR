
ATMEGAWithC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008dc  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800062  00800062  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc9  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000956  00000000  00000000  00001ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a11  00000000  00000000  0000243f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000731  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  000037fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_1>
   8:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_2>
   c:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  8a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_Direction>:
		case PortA: return (*(volatile unsigned char *) PORTA_ADDRESS) ; break;
		case PortB: return (*(volatile unsigned char *) PORTB_ADDRESS) ; break;
		case PortC: return (*(volatile unsigned char *) PORTC_ADDRESS) ; break;
		case PortD: return (*(volatile unsigned char *) PORTD_ADDRESS) ; break;
	}
}
  92:	61 11       	cpse	r22, r1
  94:	10 c0       	rjmp	.+32     	; 0xb6 <Port_Direction+0x24>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	41 f0       	breq	.+16     	; 0xaa <Port_Direction+0x18>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <Port_Direction+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	39 f0       	breq	.+14     	; 0xae <Port_Direction+0x1c>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	39 f0       	breq	.+14     	; 0xb2 <Port_Direction+0x20>
  a4:	08 95       	ret
  a6:	1a ba       	out	0x1a, r1	; 26
  a8:	08 95       	ret
  aa:	17 ba       	out	0x17, r1	; 23
  ac:	08 95       	ret
  ae:	14 ba       	out	0x14, r1	; 20
  b0:	08 95       	ret
  b2:	11 ba       	out	0x11, r1	; 17
  b4:	08 95       	ret
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	a1 f4       	brne	.+40     	; 0xe2 <Port_Direction+0x50>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	49 f0       	breq	.+18     	; 0xd0 <Port_Direction+0x3e>
  be:	28 f0       	brcs	.+10     	; 0xca <Port_Direction+0x38>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	49 f0       	breq	.+18     	; 0xd6 <Port_Direction+0x44>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	51 f0       	breq	.+20     	; 0xdc <Port_Direction+0x4a>
  c8:	08 95       	ret
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	08 95       	ret
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
  da:	08 95       	ret
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	81 bb       	out	0x11, r24	; 17
  e0:	08 95       	ret
  e2:	62 30       	cpi	r22, 0x02	; 2
  e4:	b9 f4       	brne	.+46     	; 0x114 <Port_Direction+0x82>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	51 f0       	breq	.+20     	; 0xfe <Port_Direction+0x6c>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <Port_Direction+0x64>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	59 f0       	breq	.+22     	; 0x106 <Port_Direction+0x74>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	69 f0       	breq	.+26     	; 0x10e <Port_Direction+0x7c>
  f4:	08 95       	ret
  f6:	1a ba       	out	0x1a, r1	; 26
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	08 95       	ret
  fe:	17 ba       	out	0x17, r1	; 23
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
 106:	14 ba       	out	0x14, r1	; 20
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	08 95       	ret
 10e:	11 ba       	out	0x11, r1	; 17
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <Port_Write_Value>:
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	41 f0       	breq	.+16     	; 0x12a <Port_Write_Value+0x14>
 11a:	28 f0       	brcs	.+10     	; 0x126 <Port_Write_Value+0x10>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	39 f0       	breq	.+14     	; 0x12e <Port_Write_Value+0x18>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	39 f0       	breq	.+14     	; 0x132 <Port_Write_Value+0x1c>
 124:	08 95       	ret
 126:	6b bb       	out	0x1b, r22	; 27
 128:	08 95       	ret
 12a:	68 bb       	out	0x18, r22	; 24
 12c:	08 95       	ret
 12e:	65 bb       	out	0x15, r22	; 21
 130:	08 95       	ret
 132:	62 bb       	out	0x12, r22	; 18
 134:	08 95       	ret

00000136 <Pin_Direction>:
void Pin_Direction(PORT port,PIN pin,DIRECTION direction)
{
	// Add 1 to go from PIN To DDR Register Address
	// Add 2 to go from PIN To PORT Register Address
	
	if(direction==INPUT)
 136:	41 11       	cpse	r20, r1
 138:	38 c0       	rjmp	.+112    	; 0x1aa <Pin_Direction+0x74>
	{
		switch (port)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 f0       	breq	.+36     	; 0x162 <Pin_Direction+0x2c>
 13e:	28 f0       	brcs	.+10     	; 0x14a <Pin_Direction+0x14>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	d9 f0       	breq	.+54     	; 0x17a <Pin_Direction+0x44>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	29 f1       	breq	.+74     	; 0x192 <Pin_Direction+0x5c>
 148:	08 95       	ret
		{
			case PortA: (*(volatile unsigned char *) (PORTA_ADDRESS+1))  &=~(1<<pin); break;
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <Pin_Direction+0x20>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <Pin_Direction+0x1c>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	08 95       	ret
			case PortB: (*(volatile unsigned char *) (PORTB_ADDRESS+1))  &=~(1<<pin); break;
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <Pin_Direction+0x38>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <Pin_Direction+0x34>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	87 bb       	out	0x17, r24	; 23
 178:	08 95       	ret
			case PortC: (*(volatile unsigned char *) (PORTC_ADDRESS+1))  &=~(1<<pin); break;
 17a:	24 b3       	in	r18, 0x14	; 20
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <Pin_Direction+0x50>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <Pin_Direction+0x4c>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	84 bb       	out	0x14, r24	; 20
 190:	08 95       	ret
			case PortD: (*(volatile unsigned char *) (PORTD_ADDRESS+1))  &=~(1<<pin); break;
 192:	21 b3       	in	r18, 0x11	; 17
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <Pin_Direction+0x68>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Pin_Direction+0x64>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	08 95       	ret
		}
	}
	else if(direction==OUTPUT)
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	a1 f5       	brne	.+104    	; 0x216 <Pin_Direction+0xe0>
	{
		switch (port)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	89 f0       	breq	.+34     	; 0x1d4 <Pin_Direction+0x9e>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <Pin_Direction+0x88>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	c9 f0       	breq	.+50     	; 0x1ea <Pin_Direction+0xb4>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	11 f1       	breq	.+68     	; 0x200 <Pin_Direction+0xca>
 1bc:	08 95       	ret
		{
			case PortA: (*(volatile unsigned char *) (PORTA_ADDRESS+1)) |=(1<<pin); break;
 1be:	2a b3       	in	r18, 0x1a	; 26
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Pin_Direction+0x94>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Pin_Direction+0x90>
 1ce:	82 2b       	or	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	08 95       	ret
			case PortB: (*(volatile unsigned char *) (PORTB_ADDRESS+1)) |=(1<<pin); break;
 1d4:	27 b3       	in	r18, 0x17	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Pin_Direction+0xaa>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Pin_Direction+0xa6>
 1e4:	82 2b       	or	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
			case PortC: (*(volatile unsigned char *) (PORTC_ADDRESS+1)) |=(1<<pin); break;
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Pin_Direction+0xc0>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <Pin_Direction+0xbc>
 1fa:	82 2b       	or	r24, r18
 1fc:	84 bb       	out	0x14, r24	; 20
 1fe:	08 95       	ret
			case PortD: (*(volatile unsigned char *) (PORTD_ADDRESS+1)) |=(1<<pin); break;
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <Pin_Direction+0xd6>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <Pin_Direction+0xd2>
 210:	82 2b       	or	r24, r18
 212:	81 bb       	out	0x11, r24	; 17
 214:	08 95       	ret
		}
	}
	else if(direction==PULLUP)
 216:	42 30       	cpi	r20, 0x02	; 2
 218:	09 f0       	breq	.+2      	; 0x21c <Pin_Direction+0xe6>
 21a:	47 c0       	rjmp	.+142    	; 0x2aa <Pin_Direction+0x174>
	{
		switch (port)
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	b1 f0       	breq	.+44     	; 0x24c <Pin_Direction+0x116>
 220:	28 f0       	brcs	.+10     	; 0x22c <Pin_Direction+0xf6>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	19 f1       	breq	.+70     	; 0x26c <Pin_Direction+0x136>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	89 f1       	breq	.+98     	; 0x28c <Pin_Direction+0x156>
 22a:	08 95       	ret
		{
			case PortA: (*(volatile unsigned char *) (PORTA_ADDRESS+1)) &=~(1<<pin); (*(volatile unsigned char *) (PORTA_ADDRESS+2)) |=(1<<pin); break;
 22c:	2a b3       	in	r18, 0x1a	; 26
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <Pin_Direction+0x102>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <Pin_Direction+0xfe>
 23c:	98 2f       	mov	r25, r24
 23e:	90 95       	com	r25
 240:	92 23       	and	r25, r18
 242:	9a bb       	out	0x1a, r25	; 26
 244:	9b b3       	in	r25, 0x1b	; 27
 246:	89 2b       	or	r24, r25
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
			case PortB: (*(volatile unsigned char *) (PORTB_ADDRESS+1)) &=~(1<<pin); (*(volatile unsigned char *) (PORTB_ADDRESS+2)) |=(1<<pin); break;
 24c:	27 b3       	in	r18, 0x17	; 23
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <Pin_Direction+0x122>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Pin_Direction+0x11e>
 25c:	98 2f       	mov	r25, r24
 25e:	90 95       	com	r25
 260:	92 23       	and	r25, r18
 262:	97 bb       	out	0x17, r25	; 23
 264:	98 b3       	in	r25, 0x18	; 24
 266:	89 2b       	or	r24, r25
 268:	88 bb       	out	0x18, r24	; 24
 26a:	08 95       	ret
			case PortC: (*(volatile unsigned char *) (PORTC_ADDRESS+1)) &=~(1<<pin); (*(volatile unsigned char *) (PORTC_ADDRESS+2)) |=(1<<pin); break;
 26c:	24 b3       	in	r18, 0x14	; 20
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <Pin_Direction+0x142>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <Pin_Direction+0x13e>
 27c:	98 2f       	mov	r25, r24
 27e:	90 95       	com	r25
 280:	92 23       	and	r25, r18
 282:	94 bb       	out	0x14, r25	; 20
 284:	95 b3       	in	r25, 0x15	; 21
 286:	89 2b       	or	r24, r25
 288:	85 bb       	out	0x15, r24	; 21
 28a:	08 95       	ret
			case PortD: (*(volatile unsigned char *) (PORTD_ADDRESS+1)) &=~(1<<pin); (*(volatile unsigned char *) (PORTD_ADDRESS+2)) |=(1<<pin); break;
 28c:	21 b3       	in	r18, 0x11	; 17
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <Pin_Direction+0x162>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Pin_Direction+0x15e>
 29c:	98 2f       	mov	r25, r24
 29e:	90 95       	com	r25
 2a0:	92 23       	and	r25, r18
 2a2:	91 bb       	out	0x11, r25	; 17
 2a4:	92 b3       	in	r25, 0x12	; 18
 2a6:	89 2b       	or	r24, r25
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	08 95       	ret

000002ac <EXTI_Set_Trigger_Mode>:

	- by set Bit7 inside Register (SREG)(Status Register) = LOW For Enable otherwise Set Low For Disable Global Interrupt
	
	*/
	
	clear_bit(EXTI_REG_SREG,7);
 2ac:	81 11       	cpse	r24, r1
 2ae:	24 c0       	rjmp	.+72     	; 0x2f8 <EXTI_Set_Trigger_Mode+0x4c>
 2b0:	61 30       	cpi	r22, 0x01	; 1
 2b2:	69 f0       	breq	.+26     	; 0x2ce <EXTI_Set_Trigger_Mode+0x22>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <EXTI_Set_Trigger_Mode+0x14>
 2b6:	62 30       	cpi	r22, 0x02	; 2
 2b8:	89 f0       	breq	.+34     	; 0x2dc <EXTI_Set_Trigger_Mode+0x30>
 2ba:	63 30       	cpi	r22, 0x03	; 3
 2bc:	b1 f0       	breq	.+44     	; 0x2ea <EXTI_Set_Trigger_Mode+0x3e>
 2be:	08 95       	ret
 2c0:	85 b7       	in	r24, 0x35	; 53
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	85 bf       	out	0x35, r24	; 53
 2c6:	85 b7       	in	r24, 0x35	; 53
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	85 bf       	out	0x35, r24	; 53
 2cc:	08 95       	ret
 2ce:	85 b7       	in	r24, 0x35	; 53
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	85 bf       	out	0x35, r24	; 53
 2d4:	85 b7       	in	r24, 0x35	; 53
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	85 bf       	out	0x35, r24	; 53
 2da:	08 95       	ret
 2dc:	85 b7       	in	r24, 0x35	; 53
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	85 bf       	out	0x35, r24	; 53
 2e2:	85 b7       	in	r24, 0x35	; 53
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
 2e6:	85 bf       	out	0x35, r24	; 53
 2e8:	08 95       	ret
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	8d 7f       	andi	r24, 0xFD	; 253
 2ee:	85 bf       	out	0x35, r24	; 53
 2f0:	85 b7       	in	r24, 0x35	; 53
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	85 bf       	out	0x35, r24	; 53
 2f6:	08 95       	ret
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	21 f5       	brne	.+72     	; 0x344 <EXTI_Set_Trigger_Mode+0x98>
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	69 f0       	breq	.+26     	; 0x31a <EXTI_Set_Trigger_Mode+0x6e>
 300:	28 f0       	brcs	.+10     	; 0x30c <EXTI_Set_Trigger_Mode+0x60>
 302:	62 30       	cpi	r22, 0x02	; 2
 304:	89 f0       	breq	.+34     	; 0x328 <EXTI_Set_Trigger_Mode+0x7c>
 306:	63 30       	cpi	r22, 0x03	; 3
 308:	b1 f0       	breq	.+44     	; 0x336 <EXTI_Set_Trigger_Mode+0x8a>
 30a:	08 95       	ret
 30c:	85 b7       	in	r24, 0x35	; 53
 30e:	87 7f       	andi	r24, 0xF7	; 247
 310:	85 bf       	out	0x35, r24	; 53
 312:	85 b7       	in	r24, 0x35	; 53
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	85 bf       	out	0x35, r24	; 53
 318:	08 95       	ret
 31a:	85 b7       	in	r24, 0x35	; 53
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	85 bf       	out	0x35, r24	; 53
 320:	85 b7       	in	r24, 0x35	; 53
 322:	84 60       	ori	r24, 0x04	; 4
 324:	85 bf       	out	0x35, r24	; 53
 326:	08 95       	ret
 328:	85 b7       	in	r24, 0x35	; 53
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	85 bf       	out	0x35, r24	; 53
 32e:	85 b7       	in	r24, 0x35	; 53
 330:	8b 7f       	andi	r24, 0xFB	; 251
 332:	85 bf       	out	0x35, r24	; 53
 334:	08 95       	ret
 336:	85 b7       	in	r24, 0x35	; 53
 338:	87 7f       	andi	r24, 0xF7	; 247
 33a:	85 bf       	out	0x35, r24	; 53
 33c:	85 b7       	in	r24, 0x35	; 53
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	85 bf       	out	0x35, r24	; 53
 342:	08 95       	ret
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	59 f4       	brne	.+22     	; 0x35e <EXTI_Set_Trigger_Mode+0xb2>
 348:	62 30       	cpi	r22, 0x02	; 2
 34a:	21 f4       	brne	.+8      	; 0x354 <EXTI_Set_Trigger_Mode+0xa8>
 34c:	84 b7       	in	r24, 0x34	; 52
 34e:	8f 7b       	andi	r24, 0xBF	; 191
 350:	84 bf       	out	0x34, r24	; 52
 352:	08 95       	ret
 354:	63 30       	cpi	r22, 0x03	; 3
 356:	19 f4       	brne	.+6      	; 0x35e <EXTI_Set_Trigger_Mode+0xb2>
 358:	84 b7       	in	r24, 0x34	; 52
 35a:	80 64       	ori	r24, 0x40	; 64
 35c:	84 bf       	out	0x34, r24	; 52
 35e:	08 95       	ret

00000360 <EXTI_Enable_External_Interrupt>:
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	41 f0       	breq	.+16     	; 0x374 <EXTI_Enable_External_Interrupt+0x14>
 364:	18 f0       	brcs	.+6      	; 0x36c <EXTI_Enable_External_Interrupt+0xc>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	49 f0       	breq	.+18     	; 0x37c <EXTI_Enable_External_Interrupt+0x1c>
 36a:	08 95       	ret
 36c:	8b b7       	in	r24, 0x3b	; 59
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	8b bf       	out	0x3b, r24	; 59
 372:	08 95       	ret
 374:	8b b7       	in	r24, 0x3b	; 59
 376:	80 68       	ori	r24, 0x80	; 128
 378:	8b bf       	out	0x3b, r24	; 59
 37a:	08 95       	ret
 37c:	8b b7       	in	r24, 0x3b	; 59
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	8b bf       	out	0x3b, r24	; 59
 382:	08 95       	ret

00000384 <EXTI_Clear_Interrupt_Flag>:
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	41 f0       	breq	.+16     	; 0x398 <EXTI_Clear_Interrupt_Flag+0x14>
 388:	18 f0       	brcs	.+6      	; 0x390 <EXTI_Clear_Interrupt_Flag+0xc>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	49 f0       	breq	.+18     	; 0x3a0 <EXTI_Clear_Interrupt_Flag+0x1c>
 38e:	08 95       	ret
 390:	8a b7       	in	r24, 0x3a	; 58
 392:	80 64       	ori	r24, 0x40	; 64
 394:	8a bf       	out	0x3a, r24	; 58
 396:	08 95       	ret
 398:	8a b7       	in	r24, 0x3a	; 58
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	8a bf       	out	0x3a, r24	; 58
 39e:	08 95       	ret
 3a0:	8a b7       	in	r24, 0x3a	; 58
 3a2:	80 62       	ori	r24, 0x20	; 32
 3a4:	8a bf       	out	0x3a, r24	; 58
 3a6:	08 95       	ret

000003a8 <EXTI_Set_Callback>:
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	49 f0       	breq	.+18     	; 0x3be <EXTI_Set_Callback+0x16>
 3ac:	18 f0       	brcs	.+6      	; 0x3b4 <EXTI_Set_Callback+0xc>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <EXTI_Set_Callback+0x20>
 3b2:	08 95       	ret
 3b4:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <INT0_CallbackFunctionPointer+0x1>
 3b8:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <INT0_CallbackFunctionPointer>
 3bc:	08 95       	ret
 3be:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <INT1_CallbackFunctionPointer+0x1>
 3c2:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <INT1_CallbackFunctionPointer>
 3c6:	08 95       	ret
 3c8:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 3cc:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
 3d0:	08 95       	ret

000003d2 <EXTI_Enable_Global_Interrupt>:
 3d2:	8f b7       	in	r24, 0x3f	; 63
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	8f bf       	out	0x3f, r24	; 63
 3d8:	08 95       	ret

000003da <EXTI_Initialize>:
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	c8 2f       	mov	r28, r24
 3e4:	d6 2f       	mov	r29, r22
 3e6:	8a 01       	movw	r16, r20
 3e8:	0e 94 c2 01 	call	0x384	; 0x384 <EXTI_Clear_Interrupt_Flag>
 3ec:	6d 2f       	mov	r22, r29
 3ee:	8c 2f       	mov	r24, r28
 3f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <EXTI_Set_Trigger_Mode>
 3f4:	8c 2f       	mov	r24, r28
 3f6:	0e 94 b0 01 	call	0x360	; 0x360 <EXTI_Enable_External_Interrupt>
 3fa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EXTI_Enable_Global_Interrupt>
 3fe:	b8 01       	movw	r22, r16
 400:	8c 2f       	mov	r24, r28
 402:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <EXTI_Set_Callback>
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <__vector_1>:
//Interrupt Service Routine For External Interrupt INT0

void __vector_1()
{
	//EXTI_Clear_Interrupt_Flag(EXTI_Pin_INT0);
	INT0_CallbackFunctionPointer();
 410:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_CallbackFunctionPointer>
 414:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_CallbackFunctionPointer+0x1>
 418:	09 95       	icall
 41a:	08 95       	ret

0000041c <__vector_2>:

//Interrupt Service Routine For External Interrupt INT1
void __vector_2()
{
	//EXTI_Clear_Interrupt_Flag(EXTI_Pin_INT1);
	INT1_CallbackFunctionPointer();
 41c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <INT1_CallbackFunctionPointer>
 420:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <INT1_CallbackFunctionPointer+0x1>
 424:	09 95       	icall
 426:	08 95       	ret

00000428 <__vector_3>:

//Interrupt Service Routine For External Interrupt INT2
void __vector_3()
{
	//EXTI_Clear_Interrupt_Flag(EXTI_Pin_INT2);
	INT2_CallbackFunctionPointer();
 428:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 42c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 430:	09 95       	icall
 432:	08 95       	ret

00000434 <__vector_9>:
long freq;
float tickTime;

//Interrupt Service For Timer 1 as Timer/Counter it will fire every 10 ms
ISR (TIMER1_OVF_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
	OverflowCount++;							//when timer1 overflow when reached to 65536
 446:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <OverflowCount>
 44a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <OverflowCount+0x1>
 44e:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <OverflowCount+0x2>
 452:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <OverflowCount+0x3>
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	a1 1d       	adc	r26, r1
 45a:	b1 1d       	adc	r27, r1
 45c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <OverflowCount>
 460:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <OverflowCount+0x1>
 464:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <OverflowCount+0x2>
 468:	b0 93 7b 00 	sts	0x007B, r27	; 0x80007b <OverflowCount+0x3>
}
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_6>:


//Interrupt Service For Input Capture over pin [PB0] with selected edge [Rising Edge]
ISR (TIMER1_CAPT_vect)
{ 
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	//Read Value of Input Capture Register that Represent Timer1 Value
	//ICR1 as 16 bit
	//ICR1H as Most Significant Byte
	//ICR1L as Least Significant Byte

	if(isFirst)
 4a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4a8:	89 2b       	or	r24, r25
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <__vector_6+0x44>
	{
		//First Input Capture
		start=ICR1;
 4ac:	86 b5       	in	r24, 0x26	; 38
 4ae:	97 b5       	in	r25, 0x27	; 39
 4b0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <start+0x1>
 4b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <start>
		isFirst=0;
 4b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 4c0:	59 c0       	rjmp	.+178    	; 0x574 <__vector_6+0xf6>
	}
	else
	{
		//Second Input Capture
		end=ICR1;	
 4c2:	86 b5       	in	r24, 0x26	; 38
 4c4:	97 b5       	in	r25, 0x27	; 39
 4c6:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <end+0x1>
 4ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <end>
		//Get the time of One Cyle (Tick)
		//Freq(inputCapture)=Freq(crystal)/Prescalar = 16MHZ/8=2 MHZ
		//Freq(inputCapture)=2 MHZ
		//Time=1/Freq
		//Time=1/2=0.5 uS
		tickTime=0.5;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a0 e0       	ldi	r26, 0x00	; 0
 4d4:	bf e3       	ldi	r27, 0x3F	; 63
 4d6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tickTime>
 4da:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <tickTime+0x1>
 4de:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <tickTime+0x2>
 4e2:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <tickTime+0x3>
		
		//Calculate the Time of First Input Capture Rising Signal and Last Input Capture Rising Signal
		clk=(end+OverflowCount*65536)-start;
 4e6:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <end>
 4ea:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <end+0x1>
 4ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <OverflowCount>
 4f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <OverflowCount+0x1>
 4f6:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <OverflowCount+0x2>
 4fa:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <OverflowCount+0x3>
 4fe:	dc 01       	movw	r26, r24
 500:	99 27       	eor	r25, r25
 502:	88 27       	eor	r24, r24
 504:	82 0f       	add	r24, r18
 506:	93 1f       	adc	r25, r19
 508:	a1 1d       	adc	r26, r1
 50a:	b1 1d       	adc	r27, r1
 50c:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <start>
 510:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <start+0x1>
 514:	bc 01       	movw	r22, r24
 516:	cd 01       	movw	r24, r26
 518:	62 1b       	sub	r22, r18
 51a:	73 0b       	sbc	r23, r19
 51c:	81 09       	sbc	r24, r1
 51e:	91 09       	sbc	r25, r1
		//clk=clk * TickTime;
		clk=clk * tickTime;
 520:	0e 94 32 03 	call	0x664	; 0x664 <__floatsisf>
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	5f e3       	ldi	r21, 0x3F	; 63
 52c:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 530:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fixsfsi>
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <clk>
 53c:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <clk+0x1>
 540:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <clk+0x2>
 544:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <clk+0x3>
		
		//Calculate Freq
		freq=1/clk;
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodsi4>
 554:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <freq>
 558:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <freq+0x1>
 55c:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <freq+0x2>
 560:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <freq+0x3>
		
		
		OverflowCount=0;
 564:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <OverflowCount>
 568:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <OverflowCount+0x1>
 56c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <OverflowCount+0x2>
 570:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <OverflowCount+0x3>
	}
	
}
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_11>:
	
}

//Interrupt Service For Timer 0 as Timer/Counter it will fire every 10 ms
ISR (TIMER0_OVF_vect)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
	//TCNT0=255-(F_CPU/1024/100);					//Set 99 as Start Count Value For Timer to insure that timer will overflow every 10 ms
	//TCNT0=99;
	
	//PORTD ^= (1<<PORTD4);
	
}
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <RUN_BUZZER>:
	}
	
}

void RUN_BUZZER()
{
 5aa:	08 95       	ret

000005ac <main>:
	//Pin_Direction(PortB,Pin2,OUTPUT);
	
	//Buzzer Output
	//Pin_Direction(PortB,Pin3,OUTPUT);
	
	Pin_Direction(PortA,Pin0,OUTPUT);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 9b 00 	call	0x136	; 0x136 <Pin_Direction>
	
	//Port B as Output For 8-Led
	Port_Direction(PortB,OUTPUT);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 49 00 	call	0x92	; 0x92 <Port_Direction>
	
	//Button Input
	Pin_Direction(PortD,Pin2,PULLUP);
 5be:	42 e0       	ldi	r20, 0x02	; 2
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	0e 94 9b 00 	call	0x136	; 0x136 <Pin_Direction>
	
	//Config External Interrupt Over INT0
	EXTI_Initialize(EXTI_Pin_INT0,EXTI_TriggerMode_FallingEdge,RUN_BUZZER);
 5c8:	45 ed       	ldi	r20, 0xD5	; 213
 5ca:	52 e0       	ldi	r21, 0x02	; 2
 5cc:	62 e0       	ldi	r22, 0x02	; 2
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 ed 01 	call	0x3da	; 0x3da <EXTI_Initialize>
	
	uint8 counter=0;
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
	
	//Loop -----------------
	while (1)
	{
		
		counter++;
 5d6:	cf 5f       	subi	r28, 0xFF	; 255
		
		Port_Write_Value(PortB,counter);
 5d8:	6c 2f       	mov	r22, r28
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 8b 00 	call	0x116	; 0x116 <Port_Write_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e0:	2f ef       	ldi	r18, 0xFF	; 255
 5e2:	83 ed       	ldi	r24, 0xD3	; 211
 5e4:	90 e3       	ldi	r25, 0x30	; 48
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	80 40       	sbci	r24, 0x00	; 0
 5ea:	90 40       	sbci	r25, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <main+0x3a>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x44>
 5f0:	00 00       	nop
 5f2:	f1 cf       	rjmp	.-30     	; 0x5d6 <main+0x2a>

000005f4 <__fixsfsi>:
 5f4:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 5f8:	68 94       	set
 5fa:	b1 11       	cpse	r27, r1
 5fc:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_szero>
 600:	08 95       	ret

00000602 <__fixunssfsi>:
 602:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_splitA>
 606:	88 f0       	brcs	.+34     	; 0x62a <__fixunssfsi+0x28>
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	98 f0       	brcs	.+38     	; 0x632 <__fixunssfsi+0x30>
 60c:	b9 2f       	mov	r27, r25
 60e:	99 27       	eor	r25, r25
 610:	b7 51       	subi	r27, 0x17	; 23
 612:	b0 f0       	brcs	.+44     	; 0x640 <__fixunssfsi+0x3e>
 614:	e1 f0       	breq	.+56     	; 0x64e <__fixunssfsi+0x4c>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a f0       	brmi	.+6      	; 0x626 <__fixunssfsi+0x24>
 620:	ba 95       	dec	r27
 622:	c9 f7       	brne	.-14     	; 0x616 <__fixunssfsi+0x14>
 624:	14 c0       	rjmp	.+40     	; 0x64e <__fixunssfsi+0x4c>
 626:	b1 30       	cpi	r27, 0x01	; 1
 628:	91 f0       	breq	.+36     	; 0x64e <__fixunssfsi+0x4c>
 62a:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_zero>
 62e:	b1 e0       	ldi	r27, 0x01	; 1
 630:	08 95       	ret
 632:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_zero>
 636:	67 2f       	mov	r22, r23
 638:	78 2f       	mov	r23, r24
 63a:	88 27       	eor	r24, r24
 63c:	b8 5f       	subi	r27, 0xF8	; 248
 63e:	39 f0       	breq	.+14     	; 0x64e <__fixunssfsi+0x4c>
 640:	b9 3f       	cpi	r27, 0xF9	; 249
 642:	cc f3       	brlt	.-14     	; 0x636 <__fixunssfsi+0x34>
 644:	86 95       	lsr	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b3 95       	inc	r27
 64c:	d9 f7       	brne	.-10     	; 0x644 <__fixunssfsi+0x42>
 64e:	3e f4       	brtc	.+14     	; 0x65e <__fixunssfsi+0x5c>
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__floatunsisf>:
 660:	e8 94       	clt
 662:	09 c0       	rjmp	.+18     	; 0x676 <__floatsisf+0x12>

00000664 <__floatsisf>:
 664:	97 fb       	bst	r25, 7
 666:	3e f4       	brtc	.+14     	; 0x676 <__floatsisf+0x12>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	99 23       	and	r25, r25
 678:	a9 f0       	breq	.+42     	; 0x6a4 <__floatsisf+0x40>
 67a:	f9 2f       	mov	r31, r25
 67c:	96 e9       	ldi	r25, 0x96	; 150
 67e:	bb 27       	eor	r27, r27
 680:	93 95       	inc	r25
 682:	f6 95       	lsr	r31
 684:	87 95       	ror	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f1 11       	cpse	r31, r1
 68e:	f8 cf       	rjmp	.-16     	; 0x680 <__floatsisf+0x1c>
 690:	fa f4       	brpl	.+62     	; 0x6d0 <__floatsisf+0x6c>
 692:	bb 0f       	add	r27, r27
 694:	11 f4       	brne	.+4      	; 0x69a <__floatsisf+0x36>
 696:	60 ff       	sbrs	r22, 0
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <__floatsisf+0x6c>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <__floatsisf+0x6c>
 6a4:	88 23       	and	r24, r24
 6a6:	11 f0       	breq	.+4      	; 0x6ac <__floatsisf+0x48>
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <__floatsisf+0x6a>
 6ac:	77 23       	and	r23, r23
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <__floatsisf+0x54>
 6b0:	9e e8       	ldi	r25, 0x8E	; 142
 6b2:	87 2f       	mov	r24, r23
 6b4:	76 2f       	mov	r23, r22
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__floatsisf+0x5e>
 6b8:	66 23       	and	r22, r22
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <__floatsisf+0x74>
 6bc:	96 e8       	ldi	r25, 0x86	; 134
 6be:	86 2f       	mov	r24, r22
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	2a f0       	brmi	.+10     	; 0x6d0 <__floatsisf+0x6c>
 6c6:	9a 95       	dec	r25
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	da f7       	brpl	.-10     	; 0x6c6 <__floatsisf+0x62>
 6d0:	88 0f       	add	r24, r24
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__fp_split3>:
 6da:	57 fd       	sbrc	r21, 7
 6dc:	90 58       	subi	r25, 0x80	; 128
 6de:	44 0f       	add	r20, r20
 6e0:	55 1f       	adc	r21, r21
 6e2:	59 f0       	breq	.+22     	; 0x6fa <__fp_splitA+0x10>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	71 f0       	breq	.+28     	; 0x704 <__fp_splitA+0x1a>
 6e8:	47 95       	ror	r20

000006ea <__fp_splitA>:
 6ea:	88 0f       	add	r24, r24
 6ec:	97 fb       	bst	r25, 7
 6ee:	99 1f       	adc	r25, r25
 6f0:	61 f0       	breq	.+24     	; 0x70a <__fp_splitA+0x20>
 6f2:	9f 3f       	cpi	r25, 0xFF	; 255
 6f4:	79 f0       	breq	.+30     	; 0x714 <__fp_splitA+0x2a>
 6f6:	87 95       	ror	r24
 6f8:	08 95       	ret
 6fa:	12 16       	cp	r1, r18
 6fc:	13 06       	cpc	r1, r19
 6fe:	14 06       	cpc	r1, r20
 700:	55 1f       	adc	r21, r21
 702:	f2 cf       	rjmp	.-28     	; 0x6e8 <__fp_split3+0xe>
 704:	46 95       	lsr	r20
 706:	f1 df       	rcall	.-30     	; 0x6ea <__fp_splitA>
 708:	08 c0       	rjmp	.+16     	; 0x71a <__fp_splitA+0x30>
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	99 1f       	adc	r25, r25
 712:	f1 cf       	rjmp	.-30     	; 0x6f6 <__fp_splitA+0xc>
 714:	86 95       	lsr	r24
 716:	71 05       	cpc	r23, r1
 718:	61 05       	cpc	r22, r1
 71a:	08 94       	sec
 71c:	08 95       	ret

0000071e <__fp_zero>:
 71e:	e8 94       	clt

00000720 <__fp_szero>:
 720:	bb 27       	eor	r27, r27
 722:	66 27       	eor	r22, r22
 724:	77 27       	eor	r23, r23
 726:	cb 01       	movw	r24, r22
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <__mulsf3>:
 72c:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3x>
 730:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 734:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 738:	38 f0       	brcs	.+14     	; 0x748 <__mulsf3+0x1c>
 73a:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 73e:	20 f0       	brcs	.+8      	; 0x748 <__mulsf3+0x1c>
 740:	95 23       	and	r25, r21
 742:	11 f0       	breq	.+4      	; 0x748 <__mulsf3+0x1c>
 744:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 748:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>
 74c:	11 24       	eor	r1, r1
 74e:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_szero>

00000752 <__mulsf3x>:
 752:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_split3>
 756:	70 f3       	brcs	.-36     	; 0x734 <__mulsf3+0x8>

00000758 <__mulsf3_pse>:
 758:	95 9f       	mul	r25, r21
 75a:	c1 f3       	breq	.-16     	; 0x74c <__mulsf3+0x20>
 75c:	95 0f       	add	r25, r21
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	55 1f       	adc	r21, r21
 762:	62 9f       	mul	r22, r18
 764:	f0 01       	movw	r30, r0
 766:	72 9f       	mul	r23, r18
 768:	bb 27       	eor	r27, r27
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	63 9f       	mul	r22, r19
 770:	aa 27       	eor	r26, r26
 772:	f0 0d       	add	r31, r0
 774:	b1 1d       	adc	r27, r1
 776:	aa 1f       	adc	r26, r26
 778:	64 9f       	mul	r22, r20
 77a:	66 27       	eor	r22, r22
 77c:	b0 0d       	add	r27, r0
 77e:	a1 1d       	adc	r26, r1
 780:	66 1f       	adc	r22, r22
 782:	82 9f       	mul	r24, r18
 784:	22 27       	eor	r18, r18
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	73 9f       	mul	r23, r19
 78e:	b0 0d       	add	r27, r0
 790:	a1 1d       	adc	r26, r1
 792:	62 1f       	adc	r22, r18
 794:	83 9f       	mul	r24, r19
 796:	a0 0d       	add	r26, r0
 798:	61 1d       	adc	r22, r1
 79a:	22 1f       	adc	r18, r18
 79c:	74 9f       	mul	r23, r20
 79e:	33 27       	eor	r19, r19
 7a0:	a0 0d       	add	r26, r0
 7a2:	61 1d       	adc	r22, r1
 7a4:	23 1f       	adc	r18, r19
 7a6:	84 9f       	mul	r24, r20
 7a8:	60 0d       	add	r22, r0
 7aa:	21 1d       	adc	r18, r1
 7ac:	82 2f       	mov	r24, r18
 7ae:	76 2f       	mov	r23, r22
 7b0:	6a 2f       	mov	r22, r26
 7b2:	11 24       	eor	r1, r1
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	9a f0       	brmi	.+38     	; 0x7e0 <__mulsf3_pse+0x88>
 7ba:	f1 f0       	breq	.+60     	; 0x7f8 <__mulsf3_pse+0xa0>
 7bc:	88 23       	and	r24, r24
 7be:	4a f0       	brmi	.+18     	; 0x7d2 <__mulsf3_pse+0x7a>
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	bb 1f       	adc	r27, r27
 7c6:	66 1f       	adc	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	91 50       	subi	r25, 0x01	; 1
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	a9 f7       	brne	.-22     	; 0x7bc <__mulsf3_pse+0x64>
 7d2:	9e 3f       	cpi	r25, 0xFE	; 254
 7d4:	51 05       	cpc	r21, r1
 7d6:	80 f0       	brcs	.+32     	; 0x7f8 <__mulsf3_pse+0xa0>
 7d8:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 7dc:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_szero>
 7e0:	5f 3f       	cpi	r21, 0xFF	; 255
 7e2:	e4 f3       	brlt	.-8      	; 0x7dc <__mulsf3_pse+0x84>
 7e4:	98 3e       	cpi	r25, 0xE8	; 232
 7e6:	d4 f3       	brlt	.-12     	; 0x7dc <__mulsf3_pse+0x84>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b7 95       	ror	r27
 7f0:	f7 95       	ror	r31
 7f2:	e7 95       	ror	r30
 7f4:	9f 5f       	subi	r25, 0xFF	; 255
 7f6:	c1 f7       	brne	.-16     	; 0x7e8 <__mulsf3_pse+0x90>
 7f8:	fe 2b       	or	r31, r30
 7fa:	88 0f       	add	r24, r24
 7fc:	91 1d       	adc	r25, r1
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret

00000806 <__fp_inf>:
 806:	97 f9       	bld	r25, 7
 808:	9f 67       	ori	r25, 0x7F	; 127
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	08 95       	ret

00000812 <__fp_nan>:
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	80 ec       	ldi	r24, 0xC0	; 192
 816:	08 95       	ret

00000818 <__fp_pscA>:
 818:	00 24       	eor	r0, r0
 81a:	0a 94       	dec	r0
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	09 06       	cpc	r0, r25
 824:	08 95       	ret

00000826 <__fp_pscB>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	05 06       	cpc	r0, r21
 832:	08 95       	ret

00000834 <__fp_round>:
 834:	09 2e       	mov	r0, r25
 836:	03 94       	inc	r0
 838:	00 0c       	add	r0, r0
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0xc>
 83c:	88 23       	and	r24, r24
 83e:	52 f0       	brmi	.+20     	; 0x854 <__fp_round+0x20>
 840:	bb 0f       	add	r27, r27
 842:	40 f4       	brcc	.+16     	; 0x854 <__fp_round+0x20>
 844:	bf 2b       	or	r27, r31
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0x18>
 848:	60 ff       	sbrs	r22, 0
 84a:	04 c0       	rjmp	.+8      	; 0x854 <__fp_round+0x20>
 84c:	6f 5f       	subi	r22, 0xFF	; 255
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__divmodsi4>:
 856:	05 2e       	mov	r0, r21
 858:	97 fb       	bst	r25, 7
 85a:	1e f4       	brtc	.+6      	; 0x862 <__stack+0x3>
 85c:	00 94       	com	r0
 85e:	0e 94 42 04 	call	0x884	; 0x884 <__negsi2>
 862:	57 fd       	sbrc	r21, 7
 864:	07 d0       	rcall	.+14     	; 0x874 <__divmodsi4_neg2>
 866:	0e 94 4a 04 	call	0x894	; 0x894 <__udivmodsi4>
 86a:	07 fc       	sbrc	r0, 7
 86c:	03 d0       	rcall	.+6      	; 0x874 <__divmodsi4_neg2>
 86e:	4e f4       	brtc	.+18     	; 0x882 <__divmodsi4_exit>
 870:	0c 94 42 04 	jmp	0x884	; 0x884 <__negsi2>

00000874 <__divmodsi4_neg2>:
 874:	50 95       	com	r21
 876:	40 95       	com	r20
 878:	30 95       	com	r19
 87a:	21 95       	neg	r18
 87c:	3f 4f       	sbci	r19, 0xFF	; 255
 87e:	4f 4f       	sbci	r20, 0xFF	; 255
 880:	5f 4f       	sbci	r21, 0xFF	; 255

00000882 <__divmodsi4_exit>:
 882:	08 95       	ret

00000884 <__negsi2>:
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__udivmodsi4>:
 894:	a1 e2       	ldi	r26, 0x21	; 33
 896:	1a 2e       	mov	r1, r26
 898:	aa 1b       	sub	r26, r26
 89a:	bb 1b       	sub	r27, r27
 89c:	fd 01       	movw	r30, r26
 89e:	0d c0       	rjmp	.+26     	; 0x8ba <__udivmodsi4_ep>

000008a0 <__udivmodsi4_loop>:
 8a0:	aa 1f       	adc	r26, r26
 8a2:	bb 1f       	adc	r27, r27
 8a4:	ee 1f       	adc	r30, r30
 8a6:	ff 1f       	adc	r31, r31
 8a8:	a2 17       	cp	r26, r18
 8aa:	b3 07       	cpc	r27, r19
 8ac:	e4 07       	cpc	r30, r20
 8ae:	f5 07       	cpc	r31, r21
 8b0:	20 f0       	brcs	.+8      	; 0x8ba <__udivmodsi4_ep>
 8b2:	a2 1b       	sub	r26, r18
 8b4:	b3 0b       	sbc	r27, r19
 8b6:	e4 0b       	sbc	r30, r20
 8b8:	f5 0b       	sbc	r31, r21

000008ba <__udivmodsi4_ep>:
 8ba:	66 1f       	adc	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a 94       	dec	r1
 8c4:	69 f7       	brne	.-38     	; 0x8a0 <__udivmodsi4_loop>
 8c6:	60 95       	com	r22
 8c8:	70 95       	com	r23
 8ca:	80 95       	com	r24
 8cc:	90 95       	com	r25
 8ce:	9b 01       	movw	r18, r22
 8d0:	ac 01       	movw	r20, r24
 8d2:	bd 01       	movw	r22, r26
 8d4:	cf 01       	movw	r24, r30
 8d6:	08 95       	ret

000008d8 <_exit>:
 8d8:	f8 94       	cli

000008da <__stop_program>:
 8da:	ff cf       	rjmp	.-2      	; 0x8da <__stop_program>
