////////////////////////////////////////////
//ENUMS
////////////////////////////////////////////

#pragma region ENUMS

//Timer0 , Timer1 , Timer2
typedef enum
{
	TIMER_0, 		//Used As Timer/External Counter over pin T0
	TIMER_1,		//Used As Timer/External Counter over pin T1
	TIMER_1_A,		//Used As Timer/External Counter over pin T1
	TIMER_1_B,		//Used As Timer/External Counter over pin T0
	TIMER_2			//Used As Timer/No External Counter (No Falling/Rising Edge)
}TimerType;

//Clock Stopped , Original , With Prescaler , Clock External
typedef enum
{
	CLOCK_STOPPED, 				//Clock is Stopped
	CLOCK_ORIGINAL,				//Clock without Prescaler
	CLOCK_WITH_PRESCALER,		//CLock with Prescaler
	CLOCK_EXTERNAL_FALLING_EDGE,//Clock Source From External Pin in Falling Edge (When Pulse Go From High To Low)
	CLOCK_EXTERNAL_Rissing_EDGE//Clock Source From External Pin in Rissing Edge (When Pulse Go From LOW To HIGH)
}ClockType;

//Prescaler No , 8 , 64 , 256 , 1024 , Auto
typedef enum
{
	PRESCALER_NO,
	PRESCALER_8,
	PRESCALER_32, 				//For Timer2 Only
	PRESCALER_64,
	PRESCALER_128,				//For Timer2 Only
	PRESCALER_256,
	PRESCALER_1024,
	PRESCALER_Auto,  			//Will be Selected with the lowest overflow counts
}PrescalerType;

//Timer Mode (Normal,CTC,PWM,Input Capture)
typedef enum
{
	MODE_NORMAL,
	MODE_COMPARE_CTC,
	MODE_PWM_CORRECT,
	MODE_PWM_FAST,
	MODE_INPUT_CAPTURE_FLAG
}TimerMode;

//Time Unit Micro,Mili,Second,Minute,Hour
typedef enum
{
	UNIT_MICRO,
	UNIT_MILLI, 
	UNIT_SECOND,
	UNIT_MINUTE,
	UNIT_HOUR
}TimeUnit;

//Time Duration Once , Repeat
typedef enum
{
	//Run Timer Once and Then Stop it
	DURATION_ONCE,

	//Run Timer Repeatlly until User Stop it
	DURATION_REPEAT, 
}TimerDuration;


#pragma endregion ENUMS

////////////////////////////////////////////
//STRUCTURES
////////////////////////////////////////////

#pragma region STRUCTURES

struct PrescalerInfo
{
	uint64 BaseFrequency;			//Base Frequency For MicroCOntroller
	float FinalFrequency;			//Final Frequency After Prescaler that used With Timer Clocks
	uint64 TimeByMicroSecond;		//Time By MicroSecond
	PrescalerType PrescalerType;	//The Prescaler Used
	float TimeOfClock;				//Time Period For One Pulse Clock Per (MicoSecond)
	uint64 NumberOfClocks;			//Number Of Clocks Needed To Achieve Specified Time
	float OverflowCounts;			//Count of Overflow to Achieve the Specified Time
	uint16 OverflowInteger; 		//The Integer Value of Overflow Counts
	uint8 OverflowFractions;		//The Fractions Value of Overflow Counts
	uint16 InitialTimerValue;		//The Initial Value For Timer To Be Set To Achieve Timer Delay
	uint16 CurrentOverFlowCount;	//Current Count of Overflow
	
};

#pragma endregion
